services:

  backend:
    build: ./
    environment:
      - APP_PORT=${MQS_PORT}
      - APP_HOST=0.0.0.0
      - RELOAD=false
      #- ENVIRONMENT=local
      #- WEB_CONCURRENCY=1
    restart: always
    command: bash -c "python -m mqs.app"
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.mqs.loadbalancer.server.port=${MQS_PORT}
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.mqs-http.entrypoints=http
      - "traefik.http.routers.mqs-http.rule=(Host(`${MQS_HOST}`) && PathPrefix(`/stac/v1`))"
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Make Traefik use this domain in HTTPS
      - traefik.http.routers.mqs-https.entrypoints=https
      - "traefik.http.routers.mqs-https.rule=(Host(`${MQS_HOST}`) && PathPrefix(`/stac/v1`))"
      - traefik.http.routers.mqs-https.tls=true
      # Use the "le" (Let's Encrypt) resolver
      - traefik.http.routers.mqs-https.tls.certresolver=le
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Strip stac prefix
      - "traefik.http.middlewares.mqs-stripprefix.stripprefix.prefixes=/stac/v1"
      - "traefik.http.middlewares.mqs-stripprefix.stripprefix.forceSlash=false"
      # Middleware to redirect HTTP to HTTPS
      - "traefik.http.routers.mqs-http.middlewares=https-redirect,mqs-stripprefix"
      - "traefik.http.routers.mqs-https.middlewares=mqs-stripprefix"
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - mqs01

networks:
  mqs01:
    external: true
